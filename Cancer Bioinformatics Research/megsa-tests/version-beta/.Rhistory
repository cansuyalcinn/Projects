}
library(doParallel)
library(foreach)
y <- foreach(x=1:10000) %dopar% test(x)
test <-function(x){
Sys.sleep(1)
s <-sqrt(x)
print(x,s)
return (s)
}
library(doParallel)
library(foreach)
y <- foreach(x=1:10000) %dopar% test(x)
test <-function(x){
# Sys.sleep(1)
s <-sqrt(x)
print(x,s)
return (s)
}
library(doParallel)
library(foreach)
y <- foreach(x=1:10000) %dopar% test(x)
test <-function(x){
# Sys.sleep(1)
s <-sqrt(x)
print(x,"\t",s)
return (s)
}
library(doParallel)
library(foreach)
y <- foreach(x=1:10000) %dopar% test(x)
test <-function(x){
# Sys.sleep(1)
s <-sqrt(x)
print(s,"\t",s)
return (s)
}
library(doParallel)
library(foreach)
y <- foreach(x=1:10000) %dopar% test(x)
test <-function(x){
# Sys.sleep(1)
s <-sqrt(x)
print(s,"\t",s)
return (s)
}
library(doParallel)
library(foreach)
y <- foreach(x=1:10000) %dopar% test(x)
test <-function(x){
# Sys.sleep(1)
s <-sqrt(x)
print(paste(x,s))
return (s)
}
library(doParallel)
library(foreach)
y <- foreach(x=1:10000) %dopar% test(x)
test <-function(x){
# Sys.sleep(1)
s <-sqrt(x)
print(paste(x,s))
return (s)
}
library(doParallel)
library(foreach)
num_cores <-detectCores()
cl <- makeCluster(num_cores)
y <- foreach(x=1:10000) %dopar% test(x)
test <-function(x){
# Sys.sleep(1)
s <-sqrt(x)
print(paste(x,s))
return (s)
}
library(doParallel)
library(foreach)
num_cores <-detectCores()
cl <- makeCluster(num_cores)
registerDoParallel(cl)
y <- foreach(x=1:10000) %dopar% test(x)
test <-function(x){
# Sys.sleep(1)
s <-sqrt(x)
print(paste(x,s))
return (s)
}
library(doParallel)
library(foreach)
num_cores <-detectCores()
cl <- makeCluster(num_cores)
registerDoParallel(cl)
foreach(x=1:10000) %dopar% test(x)
test <-function(x){
# Sys.sleep(1)
s <-sqrt(x)
print(paste(x,s))
return (s)
}
library(doParallel)
library(foreach)
num_cores <-detectCores()
cl <- makeCluster(num_cores)
registerDoParallel(cores = num_cores)
foreach(x=1:10000) %dopar% test(x)
test <-function(x){
# Sys.sleep(1)
s <-sqrt(x)
print(paste(x,s))/
return (s)
}
library(doParallel)
library(foreach)
num_cores <-detectCores()
cl <- makeCluster(num_cores)
registerDoParallel(cores = num_cores)
ptime<-system.time{foreach(x=1:10000) %dopar% test(x)}
ptime2<-system.time{foreach(x=1:10000) %do% test(x)}
print(ptime,ptime2)
test <-function(x){
# Sys.sleep(1)
s <-sqrt(x)
print(paste(x,s))/
return (s)
}
library(doParallel)
library(foreach)
num_cores <-detectCores()
cl <- makeCluster(num_cores)
registerDoParallel(cores = num_cores)
ptime<-system.time{foreach(x=1:10000) %dopar% test(x)}
ptime2<-system.time{foreach(x=1:10000) %do% test(x)}
print(ptime,ptime2)
test <-function(x){
# Sys.sleep(1)
s <-sqrt(x)
print(paste(x,s))
return (s)
}
library(doParallel)
library(foreach)
num_cores <-detectCores()
cl <- makeCluster(num_cores)
registerDoParallel(cl,cores = num_cores)
foreach(x=1:10000) %dopar% test(x)
test <-function(x){
# Sys.sleep(1)
s <-sqrt(x)+sqrt(x+x*x)
print(paste(x,s))
return (s)
}
library(doParallel)
library(foreach)
num_cores <-detectCores()
cl <- makeCluster(num_cores)
registerDoParallel(cl,cores = num_cores)
foreach(x=1:10000) %dopar% test(x)
run_simu <- function(i,mx){
llk <-funEstimate(mutationMat[, tempCombn[, i]])$S
g1 <-geneAll[tempCombn[, i]][1]
g2 <-geneAll[tempCombn[, i]][2]
mx[i,] <- c(g1,g2,llk,llk)
}
run_tests <- function(infile){
source("MEGSA.R")
library(doParallel)
library(foreach)
num_cores <-detectCores()-1
cl <- makeCluster(num_cores)
registerDoParallel(cl,cores = num_cores)
df <- read.table(file = infile, sep = '\t', header = TRUE,row.names = 1)
mutationMat <- as.matrix(df)
# print(mx)
geneAll <- colnames(mutationMat)
M <- ncol(mutationMat)
tempCombn <- combn(M, 2)
nPair <- ncol(tempCombn)
pairS <- rep(NA, nPair); names(pairS) <- 1:nPair
df2 <- data.frame(gene1=character(),
gene2=character(),
loglikelyhood=numeric(),
pvalue=numeric(),stringsAsFactors = FALSE)
mx <- matrix(data=NA, nrow=nPair,ncol = 4)
colnames(mx) <-list("gene1","gene2", "pvalue", "loglikelyhood")
pb <- txtProgressBar(0, nPair, style = 3)
foreach(i=1:nPair) %dopar% run_simu(i)
# for (i in 1:nPair){
#   llk <-funEstimate(mutationMat[, tempCombn[, i]])$S
#
#   g1 <-geneAll[tempCombn[, i]][1]
#   g2 <-geneAll[tempCombn[, i]][2]
#
#   mx[i,] <- c(g1,g2,llk,llk)
#
#   # if(detail)cat(i, "\t", geneAll[tempCombn[, i]],llk, "\n")
#   setTxtProgressBar(pb, i)
# }
return (data.frame(mx))
}
run_tests('mutationMat_LAML.txt')
View(y)
View(cl)
#########################################################
# This script was developed to calculate mutual_exclusion
# from MEGSA
#########################################################
# run_megsa <- function(df,detail=0){
#   source("MEGSA.R")
#
#   # mutationMat <- as.matrix(read.table(infile, header = TRUE, row.names = 1) != 0)
#
#   mutationMat <- as.matrix(df)
#   print(mutationMat)
#   geneAll <- colnames(mutationMat)
#   M <- ncol(mutationMat)
#   tempCombn <- combn(M, 2)
#   nPair <- ncol(tempCombn)
#   pairS <- rep(NA, nPair); names(pairS) <- 1:nPair
#
#   df <- data.frame(gene1=character(),
#                    gene2=character(),
#                    loglikelyhood=numeric(),
#                    pvalue=numeric(),stringsAsFactors = FALSE)
#
#   for(i in 1:nPair){
#
#     llk <-funEstimate(mutationMat[, tempCombn[, i]])$S
#     pval <- 0.5 * pchisq(llk, 1, lower.tail = FALSE)
#
#     g1 <-geneAll[tempCombn[, i]][1]
#     g2 <-geneAll[tempCombn[, i]][2]
#
#     df[i,] <- c(g1,g2,llk,pval)
#     if(detail)cat(i, "\t", geneAll[tempCombn[, i]], " pairs:", pairS,pval, "\n")
#
#   }
#
#   return(df)
# }
# run_test <-function(df,detail=TRUE){
#
#   mutationMat <- as.matrix(df)
#
#
#
#   return(mutationMat)
#
# }
run_simu <- function(i,mx){
llk <-funEstimate(mutationMat[, tempCombn[, i]])$S
g1 <-geneAll[tempCombn[, i]][1]
g2 <-geneAll[tempCombn[, i]][2]
mx[i,] <- c(g1,g2,llk,llk)
}
run_tests <- function(infile){
source("MEGSA.R")
library(doParallel)
library(foreach)
num_cores <-detectCores()-2
cl <- makeCluster(num_cores)
registerDoParallel(cl,cores = num_cores)
df <- read.table(file = infile, sep = '\t', header = TRUE,row.names = 1)
mutationMat <- as.matrix(df)
# print(mx)
geneAll <- colnames(mutationMat)
M <- ncol(mutationMat)
tempCombn <- combn(M, 2)
nPair <- ncol(tempCombn)
pairS <- rep(NA, nPair); names(pairS) <- 1:nPair
df2 <- data.frame(gene1=character(),
gene2=character(),
loglikelyhood=numeric(),
pvalue=numeric(),stringsAsFactors = FALSE)
mx <- matrix(data=NA, nrow=nPair,ncol = 4)
colnames(mx) <-list("gene1","gene2", "pvalue", "loglikelyhood")
pb <- txtProgressBar(0, nPair, style = 3)
foreach(i=1:nPair) %dopar% run_simu(i)
# for (i in 1:nPair){
#   llk <-funEstimate(mutationMat[, tempCombn[, i]])$S
#
#   g1 <-geneAll[tempCombn[, i]][1]
#   g2 <-geneAll[tempCombn[, i]][2]
#
#   mx[i,] <- c(g1,g2,llk,llk)
#
#   # if(detail)cat(i, "\t", geneAll[tempCombn[, i]],llk, "\n")
#   setTxtProgressBar(pb, i)
# }
return (data.frame(mx))
}
run_tests('mutationMat_LAML.txt')
# test <-function(x){
#   # Sys.sleep(1)
#   s <-sqrt(x)+sqrt(x+x*x)
#   print(paste(x,s))
#   return (s)
# }
#
# library(doParallel)
# library(foreach)
# num_cores <-detectCores()
# cl <- makeCluster(num_cores)
# registerDoParallel(cl,cores = num_cores)
# foreach(x=1:10000) %dopar% test(x)
#########################################################
# This script was developed to calculate mutual_exclusion
# from MEGSA
#########################################################
# run_megsa <- function(df,detail=0){
#   source("MEGSA.R")
#
#   # mutationMat <- as.matrix(read.table(infile, header = TRUE, row.names = 1) != 0)
#
#   mutationMat <- as.matrix(df)
#   print(mutationMat)
#   geneAll <- colnames(mutationMat)
#   M <- ncol(mutationMat)
#   tempCombn <- combn(M, 2)
#   nPair <- ncol(tempCombn)
#   pairS <- rep(NA, nPair); names(pairS) <- 1:nPair
#
#   df <- data.frame(gene1=character(),
#                    gene2=character(),
#                    loglikelyhood=numeric(),
#                    pvalue=numeric(),stringsAsFactors = FALSE)
#
#   for(i in 1:nPair){
#
#     llk <-funEstimate(mutationMat[, tempCombn[, i]])$S
#     pval <- 0.5 * pchisq(llk, 1, lower.tail = FALSE)
#
#     g1 <-geneAll[tempCombn[, i]][1]
#     g2 <-geneAll[tempCombn[, i]][2]
#
#     df[i,] <- c(g1,g2,llk,pval)
#     if(detail)cat(i, "\t", geneAll[tempCombn[, i]], " pairs:", pairS,pval, "\n")
#
#   }
#
#   return(df)
# }
# run_test <-function(df,detail=TRUE){
#
#   mutationMat <- as.matrix(df)
#
#
#
#   return(mutationMat)
#
# }
run_simu <- function(i,mx){
llk <-funEstimate(mutationMat[, tempCombn[, i]])$S
g1 <-geneAll[tempCombn[, i]][1]
g2 <-geneAll[tempCombn[, i]][2]
mx[i,] <- c(g1,g2,llk,llk)
}
run_tests <- function(infile){
source("MEGSA.R")
library(doParallel)
library(foreach)
num_cores <-detectCores()
print(num_cores)
Sys.sleep(2)
cl <- makeCluster(num_cores)
registerDoParallel(cl,cores = num_cores)
df <- read.table(file = infile, sep = '\t', header = TRUE,row.names = 1)
mutationMat <- as.matrix(df)
# print(mx)
geneAll <- colnames(mutationMat)
M <- ncol(mutationMat)
tempCombn <- combn(M, 2)
nPair <- ncol(tempCombn)
pairS <- rep(NA, nPair); names(pairS) <- 1:nPair
df2 <- data.frame(gene1=character(),
gene2=character(),
loglikelyhood=numeric(),
pvalue=numeric(),stringsAsFactors = FALSE)
mx <- matrix(data=NA, nrow=nPair,ncol = 4)
colnames(mx) <-list("gene1","gene2", "pvalue", "loglikelyhood")
pb <- txtProgressBar(0, nPair, style = 3)
foreach(i=1:nPair) %do% run_simu(i)
# for (i in 1:nPair){
#   llk <-funEstimate(mutationMat[, tempCombn[, i]])$S
#
#   g1 <-geneAll[tempCombn[, i]][1]
#   g2 <-geneAll[tempCombn[, i]][2]
#
#   mx[i,] <- c(g1,g2,llk,llk)
#
#   # if(detail)cat(i, "\t", geneAll[tempCombn[, i]],llk, "\n")
#   setTxtProgressBar(pb, i)
# }
return (data.frame(mx))
}
run_tests('mutationMat_LAML.txt')
# test <-function(x){
#   # Sys.sleep(1)
#   s <-sqrt(x)+sqrt(x+x*x)
#   print(paste(x,s))
#   return (s)
# }
#
# library(doParallel)
# library(foreach)
# num_cores <-detectCores()
# cl <- makeCluster(num_cores)
# registerDoParallel(cl,cores = num_cores)
# foreach(x=1:10000) %dopar% test(x)
#########################################################
# This script was developed to calculate mutual_exclusion
# from MEGSA
#########################################################
# run_megsa <- function(df,detail=0){
#   source("MEGSA.R")
#
#   # mutationMat <- as.matrix(read.table(infile, header = TRUE, row.names = 1) != 0)
#
#   mutationMat <- as.matrix(df)
#   print(mutationMat)
#   geneAll <- colnames(mutationMat)
#   M <- ncol(mutationMat)
#   tempCombn <- combn(M, 2)
#   nPair <- ncol(tempCombn)
#   pairS <- rep(NA, nPair); names(pairS) <- 1:nPair
#
#   df <- data.frame(gene1=character(),
#                    gene2=character(),
#                    loglikelyhood=numeric(),
#                    pvalue=numeric(),stringsAsFactors = FALSE)
#
#   for(i in 1:nPair){
#
#     llk <-funEstimate(mutationMat[, tempCombn[, i]])$S
#     pval <- 0.5 * pchisq(llk, 1, lower.tail = FALSE)
#
#     g1 <-geneAll[tempCombn[, i]][1]
#     g2 <-geneAll[tempCombn[, i]][2]
#
#     df[i,] <- c(g1,g2,llk,pval)
#     if(detail)cat(i, "\t", geneAll[tempCombn[, i]], " pairs:", pairS,pval, "\n")
#
#   }
#
#   return(df)
# }
# run_test <-function(df,detail=TRUE){
#
#   mutationMat <- as.matrix(df)
#
#
#
#   return(mutationMat)
#
# }
run_simu <- function(i,mx){
llk <-funEstimate(mutationMat[, tempCombn[, i]])$S
g1 <-geneAll[tempCombn[, i]][1]
g2 <-geneAll[tempCombn[, i]][2]
mx[i,] <- c(g1,g2,llk,llk)
}
run_tests <- function(infile){
source("MEGSA.R")
library(doParallel)
library(foreach)
num_cores <-detectCores(FALSE)
print(num_cores)
Sys.sleep(2)
cl <- makeCluster(num_cores)
registerDoParallel(cl,cores = num_cores)
df <- read.table(file = infile, sep = '\t', header = TRUE,row.names = 1)
mutationMat <- as.matrix(df)
# print(mx)
geneAll <- colnames(mutationMat)
M <- ncol(mutationMat)
tempCombn <- combn(M, 2)
nPair <- ncol(tempCombn)
pairS <- rep(NA, nPair); names(pairS) <- 1:nPair
df2 <- data.frame(gene1=character(),
gene2=character(),
loglikelyhood=numeric(),
pvalue=numeric(),stringsAsFactors = FALSE)
mx <- matrix(data=NA, nrow=nPair,ncol = 4)
colnames(mx) <-list("gene1","gene2", "pvalue", "loglikelyhood")
pb <- txtProgressBar(0, nPair, style = 3)
foreach(i=1:nPair) %do% run_simu(i)
# for (i in 1:nPair){
#   llk <-funEstimate(mutationMat[, tempCombn[, i]])$S
#
#   g1 <-geneAll[tempCombn[, i]][1]
#   g2 <-geneAll[tempCombn[, i]][2]
#
#   mx[i,] <- c(g1,g2,llk,llk)
#
#   # if(detail)cat(i, "\t", geneAll[tempCombn[, i]],llk, "\n")
#   setTxtProgressBar(pb, i)
# }
return (data.frame(mx))
}
run_tests('mutationMat_LAML.txt')
# test <-function(x){
#   # Sys.sleep(1)
#   s <-sqrt(x)+sqrt(x+x*x)
#   print(paste(x,s))
#   return (s)
# }
#
# library(doParallel)
# library(foreach)
# num_cores <-detectCores()
# cl <- makeCluster(num_cores)
# registerDoParallel(cl,cores = num_cores)
# foreach(x=1:10000) %dopar% test(x)
